x<- 25
y<-50
z<-x+y
z
add_2<- function (x,y)
add_2 (2,3)
add_2 <- function (x,y)
{x+y}
add_2 (9,10)
clear
clear add_2
above <- function (x,n)
{
use <- x>n
x[use]
}
above (12,50)
x <- 12:50\
x <- 12:50
above (x, 35)
columnmean <- function (y) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(y[, i])
}
}
columnmean <- function (y) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(y[, i])
}
means
}
columnmean(ait=rquality)
columnmean(airquality)
columnmean <- function (y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean <- function (y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean (airquality)
cube <- function (x,n){
x^3
}
cube (3)
x <- 1:10
if(x > 5) {
x <- 0
}
class (x)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
pollutantmean <- function (directory, pollutant, id = 1:332)
{
filelist <- list.files (path = directory, pattern = ".csv", full.names = TRUE)
values <- numeric()
for (i in id )
{
data <- read.csv(filelist[i])
values <- c(values, data[[pollutant]])
}
mean (values, na.rm= TRUE)
}
directory <- specdata
getwd()
setwd("~/R/RDocuments/specdata")
getwd
getwd()
directory <- "specdata"
pollutantmean(directory, "sulphate")
directory <- "specdata/"
pollutantmean(directory, "sulphate")
getwd()
pollutantmean("C:/Users/Ashes/Documents/R/RDocuments/specdata", "sulfate")
pollutantmean(directory, "sulfate")
directory <- "C:/Users/Ashes/Documents/R/RDocuments/specdata"
pollutantmean( directory, "sulfate")
pollutantmean( directory, "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean(directory, "nitrate", 70:72)
pollutantmeandirectory, "sulfate", 34)
pollutantmean(directory, "sulfate", 34)
pollutantmean(directory, "nitrate")
cc <- complete(directory, c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
complete <- function (directory , id = 1:332){
filelist <- list.files (path = directory , pattern = ".csv", full.names = TRUE)
nobs <- numeric()
for (i in id ){
data <- read.csv(filelist[i])
nobs <- c(nobs, sum(complete.cases(data)))
}
}
cc <- complete(directory, c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete(directory, c(6, 10, 20, 34, 100, 200, 310))
print (cc$nobs)
complete <- function (directory , id = 1:332){
filelist <- list.files (path = directory , pattern = ".csv", full.names = TRUE)
nobs <- numeric()
for (i in id ){
data <- read.csv(filelist[i])
nobs <- c(nobs, sum(complete.cases(data)))
}
data.frame(id, nobs)
}
cc <- complete(directory, c(6, 10, 20, 34, 100, 200, 310))
print (cc$nobs)
cc <- complete(directory, 54)
print (cc$nobs)
set.seed(42)
cc <- complete(directory , 332:1)
use <- sample(332,10)
print (cc[use, "nobs"])
cr <- corr(directory)
Corr <- function (directory, threshold =0){
filelist <- list.files (path = directory, pattern = ".csv", full.names = TRUE)
threshold = numeric()
for (i in threshold) {
data <- read.csv( filelist[i])
threshold <- c(threshold, Corr("nitrate", "sulfate"))
}
return (Corr)
}
cr <- corr (directory)
cr <- Corr (directory)
cr <- sort (cr)
corr <- function(directory, threshold = 0) {
# --- Assert 'directory' is a character vector of length 1 indicating the
# location of the CSV files.  'threshold' is a numeric vector of length 1
# indicating the number of completely observed observations (on all
# variables) required to compute the correlation between nitrate and
# sulfate; the default is 0.  Return a numeric vector of correlations.
# --- Assert create an empty numeric vector
corrsNum <- numeric(0)
# --- Assert get a data frame as ID = 1:332
nobsDfr <- complete(directory)
# --- Assert apply threshold
nobsDfr <- nobsDfr[nobsDfr$nobs > threshold, ]
for (cid in nobsDfr$id) {
# --- Assert get a data frame as ID in $id
monDfr <- getmonitor(cid, directory)
# --- Assert calculate correlation between $sulfate and $nitrate
corrsNum <- c(corrsNum, cor(monDfr$sulfate, monDfr$nitrate, use = "pairwise.complete.obs"))
}
# --- Assert return value is a numeric vector of correlations
return(corrsNum)
}
cr <- corr (directory)
cr <- Corr (directory)
cr <- sort (cr)
Corr <- function (directory, threshold =0){
filelist <- list.files (path = directory, pattern = ".csv", full.names = TRUE)
threshold = numeric()
for (i in threshold) {
data <- read.csv( filelist[i])
threshold <- c(threshold, Corr(data[,"nitrate"], data[, "sulfate"]))
}
return (Corr)
}
cr <- Corr(directory)
cr <- sort (cr)
Corr <- function (directory, threshold =0){
filelist <- list.files (path = directory, pattern = ".csv", full.names = TRUE)
threshold = numeric()
for (i in threshold) {
data <- read.csv( filelist[i])
threshold <- c(threshold, Corr(data[,"nitrate"], data[, "sulfate"]))
}
return (threshold)
}
cr <- Corr (directory)
cr <- sort (cr)
set.seed
cr <- Corr (868)
set.seed (868)
out <-  round(cr[sample(length(cr), 5)], 4)
out <-  cr[sample(length(cr), 5)]
sample (length(cr))
cr [0,5]
